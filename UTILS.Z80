;
; Waits for a character to become available and
; returns it in A without echo.
;
GetChar:
	ld	C,DIRCIO
	ld 	E,0FFh		; FF=Read, FE=Status
	call	BDOS
	cp 	A,00h		; No char available?
	jp 	Z,GetChar	; Loop until got a char
	ret

;
;
;
FileNotFound:
	ld	HL,MSG_FILENOTFOUND
	call	PrintString0
Exit:
	ld	HL,MSG_RESTORESCROLL
	call	PrintString0
	ld	BC,23*256+0
	call	GotoXY
	call	ClearEOL
	jp	RESET



;
; Fills the variable and buffer memory areas all the way up to and
; the CCP part of the CP/M with zeros
;
ClearMemory:
	ld	HL,(6)		; 6&7 holds pointer to BDOS
	ld	L,0
	ld	BC,VARIABLES
	or	A 		; Clear carry for the sbc instruction
	sbc	HL,BC
	ld	BC,128		; Need to bump if down a bit, don't
	sbc	HL,BC		; know why. ISSUE#1
	ld	BC,HL		; BC=length of block in bytes

	ld	HL,VARIABLES	; HL=start address of block
	ld 	E,L			; DE=HL+1
	ld 	D,H
	inc 	DE
	ld 	(HL),0		; initialise first byte of block with data

	ldir   			; Now blast-fill the memory!
	ret

;
; Print message at HL until 0, returns number of printed characters in B
;
PrintString0:
	ld 	B,0
PrintString0A:
	ld	A,(HL)
	or	A		; Check if got zero?
	ret	Z		; If zero return to caller
	call	PrintA		; else print the character
	inc	B
	inc	HL
	jp	PrintString0A

;
; Prints the 'B' bytes long string pointed to by IX, but no spaces
;
PrintNoSpaceBfromIX
	push	BC
	ld	A,(IX)		; Get character pointed to by IX
	ld	E,A
	ld	C,DIRCIO
	cp	A,' '		; Don't print spaces
	call	NZ,BDOS
	pop	BC
	inc	IX		; Advance to next character
	djnz	PrintNoSpaceBfromIX ; Loop until B=0
	ret


;
; Output character in A to console
;
PrintA:
	push	DE
	push	BC
	push	HL
	ld	E,A
	ld	C,DIRCIO
	call	BDOS
	pop	HL
	pop	BC
	pop	DE
	ret

;
;	B=LINE 		FFh=Header, 00h..16h=Editor lines
;	C=COLUMN	00h..4Fh
;
; Destroys A
;
GotoXY:
	ld	A,ESC
	call	PrintA
	ld	A,'['
	call	PrintA

	push	BC
	ld	L,B
	inc 	L		; Double offset is needed here because the
	inc 	L		; Header row is at top
	call	PrintDec2

	ld	A,';'
	call	PrintA

	pop	BC
	ld	L,C
	inc	L		; The column only need a single offset
	call	PrintDec2

	ld	A,'H'
	call	PrintA
	ret

;
; Updates the Row and Column info at the top header line
;
ShowRowCol:
	call	InverseText	; The header line is inverse

	ld	BC, XY_ROW	; Coordinates for the Row-field
	call	GotoXY
	ld 	HL, (row)	; Get the value and incremet by one since
	inc	HL		; we want 1,1 displayed instead of 0,0
	call 	PrintDec4

	ld	BC, XY_MAXROW	; Coordinates for the MaxRows-field
	call	GotoXY
	ld 	HL, (toprow)	; Get the value and incremet by one since
	inc	HL		; we want 1,1 displayed instead of 0,0
	call 	PrintDec4

	ld	BC, XY_COL	; Coordinates for the Column field
	call	GotoXY
	ld 	A, (col)
	ld	L,A
	inc 	L		; we want 1,1 displayed instead of 0,0
	call 	PrintDec2

	call	NormalText	; Go back to normal text again
	ret

;
; Output the code sequence for displaying inverse text
;
InverseText:
	ld	HL,MSG_INVERSETEXT
	jp	PrintString0

;
; Output the code sequence for displaying normal text
;
NormalText:
	ld	HL,MSG_NORMALTEXT
	jp	PrintString0

;
;
;
ClearEOL:
	ld	HL,MSG_CLREOL
	jp 	PrintString0

;
;
;
ScrollAtTop:
	ld	HL,MSG_SHIFT_DOWN
	jp	PrintString0

;
;
;
ScrollAtBottom:
	ld	HL,MSG_SHIFT_UP
	jp	PrintString0


;
; Return the current line active on the screen in HL
; Destroys BC
;
GetScreenLineToHL:
	ld	HL,(row)	; screenline=row-toprow
	ld	BC,(toprow)
	or	A
	sbc	HL,BC
;	inc	HL		; Adjust for first line being 1
	ret

;
; Position cursor on screen according to the row/col and
; taking toprow into consideration
;
SetCursor:
	call	GetScreenLineToHL
	ld	B,L		; B is line
	ld	A,(col)		; C is column
	ld	C,A
	call	GotoXY
	ret

;
; PrintDec2 / PrintDec4
;
; Print number in HL as a 2 or 4 digit decimal ASCII string with
; leading zeros
;
; Input:	HL = number to print
; Destroys: 	AF, BC, HL, DE
;
PrintDec4:
	ld	BC,-1000
	call	PrintDecA
	ld	BC,-100
	call	PrintDecA
PrintDec2:
	ld	H,0		; Make sure only L is considered...
	ld	BC,-10		; ... from this point forward
	call	PrintDecA
	ld	BC,-1
PrintDecA:
	ld	A,'0'-1
PrintDecB:
	inc	A
	add	HL,BC
	jr	C,PrintDecB
	sbc	HL,BC
	push	HL
	ld	E,A
	ld	C,DIRCIO
	call	BDOS
	pop	HL
	ret



;
; 16-bit Integer to ASCII (decimal)
;
;Input: HL = number to convert, DE = location of ASCII string
;Output: ASCII string at (DE)
;
NumAscii5
	ld	BC,-10000
	call	NA1
NumAscii4
	ld	BC,-1000
	call	NA1
NumAscii3
	ld	BC,-100
	call	NA1
NumAscii2
	ld	BC,-10
	call	NA1
NumAscii1
	ld	BC,-1

NA1	ld	A,'0'-1
NA2	inc	A
	add	HL,BC
	jr	C,NA2
	sbc	HL,BC

	ld	(DE),A
	inc	DE
	ret



;StrCopy:
;;Copy zero terminated string at HL to DE.
;;Destroys AF, DE, HL
;	xor	a		;4
;docopystr:
;	cp	(hl)		;7
;	ldi			;16
;	jr	nz,docopystr	;12
;	ret			;5

