;*****************************************************************************
; SED80 - A screen oriented text editor for Z80 CP/M 2.2
; Copyright 2017 Mats Engstrom, SmallRoomLabs
;*****************************************************************************


;
;	Common entry points and locations
;
RESET	EQU	0000h	; Warm boot/Reset vector
BDOS	EQU 	0005h	; BDOS function vector
DFCB	EQU	5CH	; Default File Control Block
DFCBcr	EQU 	DFCB+32 ; Current record
dbuf	EQU	0080h

;
; BDOS function codes
;
;WBOOT	 EQU	0	; System Reset
;GETCON	 EQU	1	; Console Input A<char
;OUTCON	 EQU	2	; Console Output E=char
;GETRDR	 EQU	3	; Reader Input A<char
;PUNCH	 EQU	4	; Punch Output E=char
;LIST	 EQU	5	; List Output E=char
DIRCIO	 EQU	6	; Direct Console I/O E=char/FE/FF A<char
;GETIOB	 EQU	7	; Get I/O Byte A<value
;SETIOB	 EQU	8	; Set I/O Byte E=value
;PRTSTR	 EQU	9	; Print $ String DE=addr
;RDBUFF	 EQU	10	; Read Console Buffer DE=addr
;GETCSTS EQU	11	; Get Console Status A<status (00empty FFdata)
;GETVER	 EQU	12	; Return Version Number HL<version
RSTDSK	 EQU	13	; Reset Disk System
;SETDSK	 EQU	14	; Select Disk E=diskno
OPENFIL	 EQU	15	; Open File DE=FCBaddr A<handle (FFerr)
CLOSEFIL EQU	16	; Close File DE=FCBaddr A<handle (FFerr)
;GETFST	 EQU	17	; Search for First DE=FCBaddr A<handle (FFerr)
;GETNXT	 EQU	18	; Search for Next A<handle (FFerr)
DELFILE	 EQU	19	; Delete File DE=FCBaddr A<handle (FFerr)
READSEQ	 EQU	20	; Read Sequential DE=FCBaddr A<status (00ok)
WRTSEQ	 EQU	21	; Write Sequential DE=FCBaddr A<status (00ok)
FCREATE	 EQU	22	; Make File  DE=FCBaddr A<handle (FFerr)
RENFILE	 EQU	23	; Rename File DE=FCBaddr A<handle (FFerr)
;GETLOG	 EQU	24	; Return Log-in Vector HL<bitmap
;GETCRNT EQU	25	; Return Current Disk A<diskno
PUTDMA	 EQU	26	; Set DMA Address DE=addr
;GETALOC EQU	27	; Get Addr (ALLOC) HL<addr
;WRTPRTD EQU	28	; Write Protect Current Disk
;GETROV	 EQU	29	; Get Read-Only Vector HL<bitmap
;SETATTR EQU	30	; Set File Attributes DE=FCBaddr A<handle
;GETPARM EQU	31	; Get Addr (DISKPARMS) A<DPBaddr
;GETUSER EQU	32	; Set/Get User Code E=code (FFget) A<value
;RDRANDOM EQU	33	; Read Random DE=FCBaddr A<status
;WTRANDOM EQU	34	; Write Random DE=FCBaddr A<status
;FILESIZE EQU	35	; Compute File Size DE=FCBaddr
;SETRAN	 EQU	36	; Set Random Record DE=FCBaddr
;LOGOFF	 EQU	37	; Reset Drive DE=drivevector
;WTSPECL EQU	40	; Write Random with Zero Fill DE=FCBaddr A<status


;
; ASCII key codes
;
CTRLB	EQU	'B'-40h	; ^B		- Key for testing
LF	EQU	'J'-40h	; ^J LF
CR 	EQU 	'M'-40h	; ^M CR/ENTER
CTRLQ	EQU	'Q'-40h	; ^Q		- Exit & Without save
CTRLR	EQU	'R'-40h	; ^R		- Refresh screen
CTRLW	EQU	'W'-40h	; ^W		- Delete next word to the right
CTRLX	EQU	'X'-40h	; ^X		- Exit & Save
CTRLY	EQU	'Y'-40h	; ^Y		- Delete line
ESC	EQU	'['-40h	; ESCAPE
EOF	EQU	'Z'-40h

;
; Start of code
;
	ORG 0100h
	jp	Start

#include "UTILS.Z80"
#include "FILE.Z80"

Start:
	call	LoadFile
	ld	HL,0
	ld	(toprow),HL
	ld	HL,0
	ld	(row),HL
	call	RefreshFullScreen
	call	RefreshTopLine

MainLoop:
	call	ShowRowCol
	call	SetCursor
	call	GetChar

	cp 	A,ESC		; Arrows and F-keys?
	jr 	NZ,$+8
	call	HandleESC
	jp	MainLoop

	cp	A,CTRLQ		; ctrl-Q Quit without saving?
	jr	NZ,$+8
	call	Exit
	jp	MainLoop

	cp	A,CTRLX		; ctrl-X Save and exit
	jr	NZ,$+8
	call	HandleSaveExit
	jp	MainLoop

	cp	A,CTRLR
	jr	NZ,$+8
	call	RefreshFullScreen
	jp	MainLoop

	cp	A,CTRLB
	jr	NZ,$+8
	call	InsertNewLineAtCursor
	jp 	MainLoop

	cp	A,CTRLY
	jr	NZ,$+8
	call	DeleteLineAtCursor
	jp 	MainLoop

	jp	MainLoop


CopyCurrentLineToEditBuf1:
	call 	CopyCurrentLineToEditBuf
	jp	MainLoop

;
; Fill editBuf with <space> terminated by <nul>
; Copy the text from current row into editBuf
;
CopyCurrentLineToEditBuf:
	ld	BC,80		;Fill 80 characers with space
	ld	HL,editBuf	; HL=start address of block
	ld 	E,L		; DE=HL+1
	ld 	D,H
	inc 	DE
	ld 	(HL),20h	; initialise first byte of block with data
	ldir   			; Now blast-fill the memory!
	ld	(HL),0		; Terminate editBuf with a 0 at the end

	; Get the source HL adddress from <row>
	call	SetHLtoAddressOfRow

	; Set destination DE to the start of the edit buffer
	ld	DE,editBuf	; HL=start address of block

	; Copy characters until <nul>
CCLL:
	ld	A,(HL)
	cp	A,0
	ret	Z
	ld	(DE),A
	inc	DE
	inc	HL
	jp	CCLL



;
; Returns with HL pointing to the first character of <row>
; Destroys BC
;
SetHLtoAddressOfRow:
	ld	BC,(row)	;
SetHLtoAddressOfRowBC:
	ld	HL,txtPtrs	; HL=&txtPtrs
	add	HL,BC		; HL=HL+BC*2 (skip to the pointer for "row")
	add	HL,BC
	ld	B,(HL)		; BC=*HL
	inc	HL
	ld	C,(HL)
	ld	HL,BC		; HL=BC
	ret

;
; Returns with HL pointing to the first character of <toprow>
; I.E the first line on screen
; Destroys BC
;
SetHLtoAddressOfTopRow:
	ld	BC,(toprow)	;
	jp	SetHLtoAddressOfRowBC

HandleSaveExit:
	call	SaveFile
	jp	Exit


HandleESC:
	call	GetChar		; Check if next character is an O indicating
	cp 	A,'O'		; a function key?
	jp	Z,HandleFkeys

	cp 	A,'['		; an arrow key?
	jp	Z,HandleArrowKeys
	ret			; Go back to loop if unrecognized

HandleArrowKeys:
	call	GetChar		; Now get the "action" character for Arrows
	cp 	A,'A'		; ARROW UP ?
	jp	Z,KeyUp
	cp 	A,'B'		; ARROW DOWN ?
	jp	Z,KeyDown
	cp 	A,'C'		; ARROW RIGHT ?
	jp	Z,KeyRight
	cp 	A,'D'		; ARROW LEFT ?
	jp	Z,KeyLeft
	ret			; Go back to mainloop if unrecongized

HandleFkeys:
	call	GetChar		; Now get the "action" character for Fx
	cp 	A,'P'		; F1 ?
	jp	Z,KeyF1
	cp 	A,'Q'		; F2 ?
	jp	Z,KeyF2
	cp 	A,'R'		; F3 ?
	jp	Z,KeyF3
	cp 	A,'S'		; F4 ?
	jp	Z,KeyF4
	ret			; Go back to mainloop if unrecongized

KeyF1   ret			; Back to mainloop
KeyF2   ret			; Back to mainloop
KeyF3   ret			; Back to mainloop
KeyF4   ret			; Back to mainloop


;
; if (row==0) return
; If (row>toprow) row--; return
; else row--; toprow=row; return
;
; row>toprow	(row-1)-toprow is not carry
;
KeyUp
	ld	HL,(row)	; return if row==0
	ld	A,H
	or	A,L
	ret	Z

	dec	HL		; row=row-1
	ld	(row),HL

	ld	BC,(toprow)	; If row>=toprow then return
	or 	A		; Check by doing row-toprow
	sbc 	HL,BC		; Carry is not set when row is larger
	ret 	NC		; or equal to toprow

	dec	BC		; toprow=toprow-1
	ld	(toprow),BC	; toprow=row
	call	ScrollAtTop
	call	RefreshTopLine
	ret			; Back to mainloop

;
; if (row+23<toprow) row++; return;
; if (row<maxrows) row++; toprow++; return;
;
KeyDown
	ld	HL,(row)
	ld	BC,(toprow)
	or	A
	sbc	HL,BC
	ld	BC,22
	or	A
	sbc	HL,BC
	jp 	NC,KD1

	; We're still inside the screen area with the cursor so
	; we only need to move the active line
	ld	HL,(row)	; row=row+1
	inc 	HL
	ld	(row),HL
	ret			; Back to mainloop

KD1
	; Reached bottom of screen, so we must scroll
	; incrementing toptop
	ld	HL,(row)	; row=row+1
	inc	HL
	ld	(row),HL
	ld	HL,(toprow)	; toprow=toprow+1
	inc	HL
	ld	(toprow),HL
	call	ScrollAtBottom
	call	RefreshBottomLine
	ret			; Back to mainloop

KeyRight
	ld	A,(col)
	cp	A,79
	ret	Z		; Back to mainloop
	inc	A
	ld 	(col),A
	ret			; Back to mainloop

KeyLeft
	ld	A,(col)
	cp	A,0
	ret	Z		; Back to mainloop
	dec	A
	ld 	(col),A
	ret			; Back to mainloop

;
;
;
RefreshFullScreen:
	ld	HL,MSG_CLEAR	; Clear screen and Home cursor
	call	PrintString0
	call	InverseText	; The header line is printed in inverse

	ld	HL,MSG_HEADER	; Print the 80 chars wide template
	call	PrintString0

	ld	BC,XY_NAME	; Position at the filename field in header
	call	GotoXY
	ld	IX,DFCB+1	; Start of filename in File Control Block
	ld	B,8		; First part is 8 characters
	call	PrintNoSpaceBfromIX
	ld	A,'.'		; Print the dot between filname & extension
	call	PrintA
	ld 	B,3		; Then print the extension
	call	PrintNoSpaceBfromIX

	call	NormalText	; Go back to normal text again
	call	RefreshEditScreen
	ret


;
; This redraws the first line of the editing part of the screen
; when it has scrolled.
;
RefreshTopLine:
	call	SetHLtoAddressOfTopRow
	ld	BC,XY_EDITTOP
	jp	RefreshSingleLine


;
; This redraws the last line on the editing part of the screen
; when it has scrolled.
;
RefreshBottomLine:
	ld	HL,(toprow)	; Go down 22 lines down to adjust for
	ld	BC,22		; the number of lines on the screen
	add	HL,BC
	ld	BC,HL
	call	SetHLtoAddressOfRowBC
	ld	BC,XY_EDITBOT
	jp	RefreshSingleLine

;
; Update a single line on screen
; B = Line number
; C = 0
; HL = Start of text for the line
;
RefreshSingleLine:
	push	HL
	call	GotoXY
	pop	HL
	call	PrintString0
	ld	A,B		; If we aren't on the last column alread
	cp	A,80		; we need to clear to end of line
	call	NZ,ClearEOL
	ret

;
;
;
RefreshEditScreen:
	ld	HL,(toprow)	; toprow will be modified in this
	push	HL		; function so we need to save it

	ld	BC,XY_EDITTOP

RELoop:
	push	BC
	call 	SetHLtoAddressOfTopRow
	pop	BC
	push	BC
	call	RefreshSingleLine
	pop	BC
	ld	HL,(toprow)	; Point to next row
	inc	HL
	ld	(toprow),HL
	inc	B		; Goto next row on screen
	ld	A,B
	cp	A,23		; at last row?
	jp	NZ,RELoop	; Nope, do some more printing

	pop	HL		; Restore the saved toprow variable
	ld	(toprow),HL

	call	SetCursor

	ret




;
;
;
InsertNewLineAtCursor
	call	GetScreenLineToHL
	inc	HL		; Adjust for header line

	push	HL		; Patch in the line into two places in
	ld	DE,MSG_NEWLINE_AT+2 ;the escape sequences.
	call	NumAscii2
	pop	HL
	ld	DE,MSG_NEWLINE_AT+10
	call	NumAscii2

	ld	HL,MSG_NEWLINE_AT ;And send it to the terminal
	call	PrintString0


; LDIR
;	(DE) = (HL)
;	DE = DE + 1
;	HL = HL + 1
;	BC = BC - 1 repeat until BC = 0
;
; LDDR
;	(DE) = (HL)
;	DE = DE - 1
;	HL = HL - 1
;	BC = BC - 1 repeat until BC = 0
;

;
; OLD 012345678901234567890  len=10
; NEW 0123__456789012345678  pos=2
;
; Source = HL = len-1
; Dest   = DE = HL-1
; Count  = BC = len-pos-1
;

	ld	BC,(row)	;
	ld	HL,txtPtrs	; HL=&txtPtrs
	add	HL,BC		; HL=HL+BC*2 (skip to the pointer for "row")
	add	HL,BC

	ret



;
;
;
DeleteLineAtCursor
	call	GetScreenLineToHL
	inc	HL		; Adjust for header line

	ld	DE,MSG_DELLINE_AT+2 ; Patch in the line number into
	call	NumAscii2	; the string

	ld	HL,MSG_DELLINE_AT ;And send it to the terminal
	call	PrintString0

	call	RefreshBottomLine
	ret

;
; Static text/message strings
;

MSG_SHIFT_DOWN
	DB	ESC,'[2;24r',ESC,'[2;1H',ESC,'M',0

MSG_SHIFT_UP
	DB	ESC,'[2;24r',ESC,'[24;1H',ESC,'D',0

MSG_NEWLINE_AT
	DB	ESC,'[__;24r',ESC,'[__;1H',ESC,'M',0

MSG_DELLINE_AT
	DB	ESC,'[__;24r',ESC,'[24;1H',ESC,'D',0

MSG_RESTORESCROLL
	DB 	ESC,'[r',0

MSG_CLEAR
	DB	ESC,'[2J',ESC,'[H',0

MSG_INVERSETEXT
	DB	ESC,'[7m',0

MSG_NORMALTEXT
	DB	ESC,'[0m',0

MSG_CLREOL
	DB	ESC,'[K',0

MSG_FILENOTFOUND
	DB	CR,LF,"File not found",CR,LF,0

MSG_HEADER
	;        01234567890123456789012345678901234567890123456789012345678901234567890123456789
	;         FILENAME.EXT * Row 1234/0458 Col 22
	DB	'              * Row ----/---- Col --                                            ',0

XY_NAME 	EQU	0FFh*256 + 1
XY_ROW 		EQU	0FFh*256 + 20
XY_MAXROW 	EQU	0FFh*256 + 25
XY_COL		EQU	0FFh*256 + 34

XY_EDITTOP	EQU	0*256+0
XY_EDITBOT	EQU	22*256+0

;
; Variables
;
MAXROWS	EQU	1024

guard1	DB	'@'
editBuf	DS	81	; Copy of the line being edited
guard2	DB	'@'

VARIABLES EQU $		; Label used by ClearMemory function

cnt	DS	1	; Generic counter
toprow	DS	2	; The first line to be displayed on screen
row 	DS	2	; Current row/line in the editor
col 	DS	1	; Current column in the editor
txtPtrs	DS	MAXROWS*2 ; Pointers to the beginning of each line
textBuf	EQU	$	; Start of the loaded file being edited

	END
